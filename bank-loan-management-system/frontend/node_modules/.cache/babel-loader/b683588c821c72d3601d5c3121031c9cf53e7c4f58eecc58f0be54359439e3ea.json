{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chait\\\\bank-loan-management-system\\\\frontend\\\\src\\\\components\\\\Payment\\\\Payment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Payment.css';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3001/api/v1';\nfunction Payment() {\n  _s();\n  const [formData, setFormData] = useState({\n    loan_id: '',\n    amount: '',\n    payment_type: 'EMI'\n  });\n  const [error, setError] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalInfo, setModalInfo] = useState({\n    title: '',\n    message: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleShowModal = (title, message) => {\n    setModalInfo({\n      title,\n      message\n    });\n    setIsModalOpen(true);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    try {\n      if (!formData.loan_id.trim()) throw new Error('Loan ID is required.');\n      const response = await fetch(`${API_URL}/loans/${formData.loan_id}/payments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: formData.amount,\n          payment_type: formData.payment_type\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || 'Failed to record payment.');\n      if (data.loan_closed) {\n        if (parseFloat(data.overpaid_amount) > 0) {\n          handleShowModal(\"Loan Closed with Overpayment\", `The loan for ${data.customer_name} is now fully paid. An overpayment of ₹${data.overpaid_amount} will be refunded.`);\n        } else {\n          handleShowModal(\"Loan Closed!\", `Congratulations! The loan for ${data.customer_name} has been fully paid off.`);\n        }\n      } else {\n        handleShowModal(\"Payment Successful\", `Payment of ₹${formData.amount} for ${data.customer_name} was successful. The new balance is ₹${data.remaining_balance}.`);\n      }\n      setFormData({\n        loan_id: '',\n        amount: '',\n        payment_type: 'EMI'\n      });\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: () => setIsModalOpen(false),\n      title: modalInfo.title,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: modalInfo.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Record a Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"loan_id\",\n        value: formData.loan_id,\n        onChange: handleChange,\n        placeholder: \"Loan ID\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"amount\",\n        value: formData.amount,\n        onChange: handleChange,\n        placeholder: \"Payment Amount (\\u20B9)\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"payment_type\",\n        value: formData.payment_type,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"EMI\",\n          children: \"EMI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LUMP_SUM\",\n          children: \"Lump Sum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Record Payment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(Payment, \"TpmmNUakskn2XdUp+iMz2wAbAtw=\");\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","Modal","jsxDEV","_jsxDEV","API_URL","Payment","_s","formData","setFormData","loan_id","amount","payment_type","error","setError","isModalOpen","setIsModalOpen","modalInfo","setModalInfo","title","message","handleChange","e","name","value","target","prev","handleShowModal","handleSubmit","preventDefault","trim","Error","response","fetch","method","headers","body","JSON","stringify","data","json","ok","loan_closed","parseFloat","overpaid_amount","customer_name","remaining_balance","err","className","children","isOpen","onClose","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/chait/bank-loan-management-system/frontend/src/components/Payment/Payment.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Payment.css';\r\nimport Modal from '../Modal/Modal';\r\n\r\nconst API_URL = 'http://localhost:3001/api/v1';\r\n\r\nfunction Payment() {\r\n    const [formData, setFormData] = useState({\r\n        loan_id: '',\r\n        amount: '',\r\n        payment_type: 'EMI'\r\n    });\r\n    const [error, setError] = useState('');\r\n    \r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [modalInfo, setModalInfo] = useState({ title: '', message: '' });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n    \r\n    const handleShowModal = (title, message) => {\r\n        setModalInfo({ title, message });\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        \r\n        try {\r\n            if (!formData.loan_id.trim()) throw new Error('Loan ID is required.');\r\n            \r\n            const response = await fetch(`${API_URL}/loans/${formData.loan_id}/payments`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    amount: formData.amount,\r\n                    payment_type: formData.payment_type\r\n                })\r\n            });\r\n            const data = await response.json();\r\n            \r\n            if (!response.ok) throw new Error(data.error || 'Failed to record payment.');\r\n            \r\n            if (data.loan_closed) {\r\n                if (parseFloat(data.overpaid_amount) > 0) {\r\n                    handleShowModal(\r\n                        \"Loan Closed with Overpayment\",\r\n                        `The loan for ${data.customer_name} is now fully paid. An overpayment of ₹${data.overpaid_amount} will be refunded.`\r\n                    );\r\n                } else {\r\n                    handleShowModal(\r\n                        \"Loan Closed!\",\r\n                        `Congratulations! The loan for ${data.customer_name} has been fully paid off.`\r\n                    );\r\n                }\r\n            } else {\r\n                 handleShowModal(\r\n                    \"Payment Successful\",\r\n                    `Payment of ₹${formData.amount} for ${data.customer_name} was successful. The new balance is ₹${data.remaining_balance}.`\r\n                 );\r\n            }\r\n            setFormData({ loan_id: '', amount: '', payment_type: 'EMI' });\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"payment-container\">\r\n            <Modal \r\n                isOpen={isModalOpen} \r\n                onClose={() => setIsModalOpen(false)} \r\n                title={modalInfo.title}\r\n            >\r\n                <p>{modalInfo.message}</p>\r\n            </Modal>\r\n\r\n            <h2>Record a Payment</h2>\r\n            <form onSubmit={handleSubmit} className=\"form-container\">\r\n                <input type=\"text\" name=\"loan_id\" value={formData.loan_id} onChange={handleChange} placeholder=\"Loan ID\" required />\r\n                <input type=\"number\" name=\"amount\" value={formData.amount} onChange={handleChange} placeholder=\"Payment Amount (₹)\" required />\r\n                <select name=\"payment_type\" value={formData.payment_type} onChange={handleChange}>\r\n                    <option value=\"EMI\">EMI</option>\r\n                    <option value=\"LUMP_SUM\">Lump Sum</option>\r\n                </select>\r\n                <button type=\"submit\">Record Payment</button>\r\n            </form>\r\n            {error && <p className=\"error\">{error}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Payment;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AACtB,OAAOC,KAAK,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,OAAO,GAAG,8BAA8B;AAE9C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC;IACrCS,OAAO,EAAE,EAAE;IACXC,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC;IAAEkB,KAAK,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAEtE,MAAMC,YAAY,GAAIC,CAAC,IAAK;IACxB,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChChB,WAAW,CAACiB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACrD,CAAC;EAED,MAAMG,eAAe,GAAGA,CAACR,KAAK,EAAEC,OAAO,KAAK;IACxCF,YAAY,CAAC;MAAEC,KAAK;MAAEC;IAAQ,CAAC,CAAC;IAChCJ,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMY,YAAY,GAAG,MAAON,CAAC,IAAK;IAC9BA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClBf,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACA,IAAI,CAACN,QAAQ,CAACE,OAAO,CAACoB,IAAI,CAAC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MAErE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG5B,OAAO,UAAUG,QAAQ,CAACE,OAAO,WAAW,EAAE;QAC1EwB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB3B,MAAM,EAAEH,QAAQ,CAACG,MAAM;UACvBC,YAAY,EAAEJ,QAAQ,CAACI;QAC3B,CAAC;MACL,CAAC,CAAC;MACF,MAAM2B,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE,MAAM,IAAIV,KAAK,CAACQ,IAAI,CAAC1B,KAAK,IAAI,2BAA2B,CAAC;MAE5E,IAAI0B,IAAI,CAACG,WAAW,EAAE;QAClB,IAAIC,UAAU,CAACJ,IAAI,CAACK,eAAe,CAAC,GAAG,CAAC,EAAE;UACtCjB,eAAe,CACX,8BAA8B,EAC9B,gBAAgBY,IAAI,CAACM,aAAa,0CAA0CN,IAAI,CAACK,eAAe,oBACpG,CAAC;QACL,CAAC,MAAM;UACHjB,eAAe,CACX,cAAc,EACd,iCAAiCY,IAAI,CAACM,aAAa,2BACvD,CAAC;QACL;MACJ,CAAC,MAAM;QACFlB,eAAe,CACZ,oBAAoB,EACpB,eAAenB,QAAQ,CAACG,MAAM,QAAQ4B,IAAI,CAACM,aAAa,wCAAwCN,IAAI,CAACO,iBAAiB,GACzH,CAAC;MACN;MACArC,WAAW,CAAC;QAAEC,OAAO,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAM,CAAC,CAAC;IAEjE,CAAC,CAAC,OAAOmC,GAAG,EAAE;MACVjC,QAAQ,CAACiC,GAAG,CAAC3B,OAAO,CAAC;IACzB;EACJ,CAAC;EAED,oBACIhB,OAAA;IAAK4C,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9B7C,OAAA,CAACF,KAAK;MACFgD,MAAM,EAAEnC,WAAY;MACpBoC,OAAO,EAAEA,CAAA,KAAMnC,cAAc,CAAC,KAAK,CAAE;MACrCG,KAAK,EAAEF,SAAS,CAACE,KAAM;MAAA8B,QAAA,eAEvB7C,OAAA;QAAA6C,QAAA,EAAIhC,SAAS,CAACG;MAAO;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eAERnD,OAAA;MAAA6C,QAAA,EAAI;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBnD,OAAA;MAAMoD,QAAQ,EAAE5B,YAAa;MAACoB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBACpD7C,OAAA;QAAOqD,IAAI,EAAC,MAAM;QAAClC,IAAI,EAAC,SAAS;QAACC,KAAK,EAAEhB,QAAQ,CAACE,OAAQ;QAACgD,QAAQ,EAAErC,YAAa;QAACsC,WAAW,EAAC,SAAS;QAACC,QAAQ;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpHnD,OAAA;QAAOqD,IAAI,EAAC,QAAQ;QAAClC,IAAI,EAAC,QAAQ;QAACC,KAAK,EAAEhB,QAAQ,CAACG,MAAO;QAAC+C,QAAQ,EAAErC,YAAa;QAACsC,WAAW,EAAC,yBAAoB;QAACC,QAAQ;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/HnD,OAAA;QAAQmB,IAAI,EAAC,cAAc;QAACC,KAAK,EAAEhB,QAAQ,CAACI,YAAa;QAAC8C,QAAQ,EAAErC,YAAa;QAAA4B,QAAA,gBAC7E7C,OAAA;UAAQoB,KAAK,EAAC,KAAK;UAAAyB,QAAA,EAAC;QAAG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChCnD,OAAA;UAAQoB,KAAK,EAAC,UAAU;UAAAyB,QAAA,EAAC;QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACTnD,OAAA;QAAQqD,IAAI,EAAC,QAAQ;QAAAR,QAAA,EAAC;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,EACN1C,KAAK,iBAAIT,OAAA;MAAG4C,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEpC;IAAK;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEd;AAAChD,EAAA,CAxFQD,OAAO;AAAAuD,EAAA,GAAPvD,OAAO;AA0FhB,eAAeA,OAAO;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}