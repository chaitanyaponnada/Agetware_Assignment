{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chait\\\\bank-loan-management-system\\\\frontend\\\\src\\\\components\\\\Payment\\\\Payment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Payment.css';\nimport Modal from '../Modal/Modal'; // Assuming Modal component exists\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3001/api/v1';\nfunction Payment() {\n  _s();\n  const [formData, setFormData] = useState({\n    loan_id: '',\n    amount: '',\n    payment_type: 'EMI'\n  });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // State for managing the modal\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalInfo, setModalInfo] = useState({\n    title: '',\n    message: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Function to trigger the modal display\n  const showModal = (title, message) => {\n    setModalInfo({\n      title,\n      message\n    });\n    setIsModalOpen(true);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    if (!formData.loan_id.trim() || !formData.amount.trim()) {\n      setError('Loan ID and Amount are required.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_URL}/loans/${formData.loan_id}/payments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: formData.amount,\n          payment_type: formData.payment_type\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || 'Failed to record payment.');\n\n      // Handle different success scenarios with the modal\n      if (data.loan_closed) {\n        if (parseFloat(data.overpaid_amount) > 0) {\n          showModal(\"Loan Closed & Refund Due\", `The loan for ${data.customer_name} is fully paid. An overpayment of ₹${parseFloat(data.overpaid_amount).toFixed(2)} will be refunded.`);\n        } else {\n          showModal(\"Loan Closed!\", `Congratulations, ${data.customer_name}! This loan has been fully paid off.`);\n        }\n      } else {\n        showModal(\"Payment Successful\", `Payment of ₹${parseFloat(formData.amount).toFixed(2)} for ${data.customer_name} was successful. The new remaining balance is ₹${parseFloat(data.remaining_balance).toFixed(2)}.`);\n      }\n      // Clear form after any successful transaction\n      setFormData({\n        loan_id: '',\n        amount: '',\n        payment_type: 'EMI'\n      });\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: () => setIsModalOpen(false),\n      title: modalInfo.title,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: modalInfo.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"component-title\",\n      children: \"Record a Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"component-subtitle\",\n      children: \"Submit an EMI or a lump sum amount for an active loan.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"loan_id\",\n        value: formData.loan_id,\n        onChange: handleChange,\n        placeholder: \"Loan ID\",\n        required: true,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"amount\",\n        value: formData.amount,\n        onChange: handleChange,\n        placeholder: \"Payment Amount (\\u20B9)\",\n        required: true,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"payment_type\",\n        value: formData.payment_type,\n        onChange: handleChange,\n        disabled: isLoading,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"EMI\",\n          children: \"EMI Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"LUMP_SUM\",\n          children: \"Lump Sum Payment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Record Payment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true);\n}\n_s(Payment, \"MC/B74GnG+jINzLXBkDyJhzpuRI=\");\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","Payment","_s","formData","setFormData","loan_id","amount","payment_type","error","setError","isLoading","setIsLoading","isModalOpen","setIsModalOpen","modalInfo","setModalInfo","title","message","handleChange","e","name","value","target","prev","showModal","handleSubmit","preventDefault","trim","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","loan_closed","parseFloat","overpaid_amount","customer_name","toFixed","remaining_balance","err","children","isOpen","onClose","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","type","onChange","placeholder","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/chait/bank-loan-management-system/frontend/src/components/Payment/Payment.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Payment.css';\r\nimport Modal from '../Modal/Modal'; // Assuming Modal component exists\r\n\r\nconst API_URL = 'http://localhost:3001/api/v1';\r\n\r\nfunction Payment() {\r\n    const [formData, setFormData] = useState({\r\n        loan_id: '',\r\n        amount: '',\r\n        payment_type: 'EMI'\r\n    });\r\n    const [error, setError] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    \r\n    // State for managing the modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [modalInfo, setModalInfo] = useState({ title: '', message: '' });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n    \r\n    // Function to trigger the modal display\r\n    const showModal = (title, message) => {\r\n        setModalInfo({ title, message });\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        if (!formData.loan_id.trim() || !formData.amount.trim()) {\r\n            setError('Loan ID and Amount are required.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_URL}/loans/${formData.loan_id}/payments`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    amount: formData.amount,\r\n                    payment_type: formData.payment_type\r\n                })\r\n            });\r\n            const data = await response.json();\r\n            \r\n            if (!response.ok) throw new Error(data.error || 'Failed to record payment.');\r\n            \r\n            // Handle different success scenarios with the modal\r\n            if (data.loan_closed) {\r\n                if (parseFloat(data.overpaid_amount) > 0) {\r\n                    showModal(\r\n                        \"Loan Closed & Refund Due\",\r\n                        `The loan for ${data.customer_name} is fully paid. An overpayment of ₹${parseFloat(data.overpaid_amount).toFixed(2)} will be refunded.`\r\n                    );\r\n                } else {\r\n                    showModal(\r\n                        \"Loan Closed!\",\r\n                        `Congratulations, ${data.customer_name}! This loan has been fully paid off.`\r\n                    );\r\n                }\r\n            } else {\r\n                 showModal(\r\n                    \"Payment Successful\",\r\n                    `Payment of ₹${parseFloat(formData.amount).toFixed(2)} for ${data.customer_name} was successful. The new remaining balance is ₹${parseFloat(data.remaining_balance).toFixed(2)}.`\r\n                );\r\n            }\r\n            // Clear form after any successful transaction\r\n            setFormData({ loan_id: '', amount: '', payment_type: 'EMI' });\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal \r\n                isOpen={isModalOpen} \r\n                onClose={() => setIsModalOpen(false)} \r\n                title={modalInfo.title}\r\n            >\r\n                <p>{modalInfo.message}</p>\r\n            </Modal>\r\n\r\n            <h2 className=\"component-title\">Record a Payment</h2>\r\n            <p className=\"component-subtitle\">Submit an EMI or a lump sum amount for an active loan.</p>\r\n            \r\n            <form onSubmit={handleSubmit} className=\"form-container\">\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"loan_id\" \r\n                    value={formData.loan_id} \r\n                    onChange={handleChange} \r\n                    placeholder=\"Loan ID\" \r\n                    required \r\n                    disabled={isLoading}\r\n                />\r\n                <input \r\n                    type=\"number\" \r\n                    name=\"amount\" \r\n                    value={formData.amount} \r\n                    onChange={handleChange} \r\n                    placeholder=\"Payment Amount (₹)\" \r\n                    required \r\n                    disabled={isLoading}\r\n                />\r\n                <select \r\n                    name=\"payment_type\" \r\n                    value={formData.payment_type} \r\n                    onChange={handleChange}\r\n                    disabled={isLoading}\r\n                >\r\n                    <option value=\"EMI\">EMI Payment</option>\r\n                    <option value=\"LUMP_SUM\">Lump Sum Payment</option>\r\n                </select>\r\n                <button type=\"submit\" disabled={isLoading}>\r\n                    {isLoading ? 'Processing...' : 'Record Payment'}\r\n                </button>\r\n            </form>\r\n            \r\n            {error && <p className=\"error\">{error}</p>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Payment;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AACtB,OAAOC,KAAK,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpC,MAAMC,OAAO,GAAG,8BAA8B;AAE9C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC;IACrCW,OAAO,EAAE,EAAE;IACXC,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC;IAAEsB,KAAK,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAEtE,MAAMC,YAAY,GAAIC,CAAC,IAAK;IACxB,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChClB,WAAW,CAACmB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACrD,CAAC;;EAED;EACA,MAAMG,SAAS,GAAGA,CAACR,KAAK,EAAEC,OAAO,KAAK;IAClCF,YAAY,CAAC;MAAEC,KAAK;MAAEC;IAAQ,CAAC,CAAC;IAChCJ,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMY,YAAY,GAAG,MAAON,CAAC,IAAK;IAC9BA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClBjB,QAAQ,CAAC,EAAE,CAAC;IACZ,IAAI,CAACN,QAAQ,CAACE,OAAO,CAACsB,IAAI,CAAC,CAAC,IAAI,CAACxB,QAAQ,CAACG,MAAM,CAACqB,IAAI,CAAC,CAAC,EAAE;MACrDlB,QAAQ,CAAC,kCAAkC,CAAC;MAC5C;IACJ;IAEAE,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACA,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG7B,OAAO,UAAUG,QAAQ,CAACE,OAAO,WAAW,EAAE;QAC1EyB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB5B,MAAM,EAAEH,QAAQ,CAACG,MAAM;UACvBC,YAAY,EAAEJ,QAAQ,CAACI;QAC3B,CAAC;MACL,CAAC,CAAC;MACF,MAAM4B,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAAC3B,KAAK,IAAI,2BAA2B,CAAC;;MAE5E;MACA,IAAI2B,IAAI,CAACI,WAAW,EAAE;QAClB,IAAIC,UAAU,CAACL,IAAI,CAACM,eAAe,CAAC,GAAG,CAAC,EAAE;UACtCjB,SAAS,CACL,0BAA0B,EAC1B,gBAAgBW,IAAI,CAACO,aAAa,sCAAsCF,UAAU,CAACL,IAAI,CAACM,eAAe,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,oBACvH,CAAC;QACL,CAAC,MAAM;UACHnB,SAAS,CACL,cAAc,EACd,oBAAoBW,IAAI,CAACO,aAAa,sCAC1C,CAAC;QACL;MACJ,CAAC,MAAM;QACFlB,SAAS,CACN,oBAAoB,EACpB,eAAegB,UAAU,CAACrC,QAAQ,CAACG,MAAM,CAAC,CAACqC,OAAO,CAAC,CAAC,CAAC,QAAQR,IAAI,CAACO,aAAa,kDAAkDF,UAAU,CAACL,IAAI,CAACS,iBAAiB,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,GAClL,CAAC;MACL;MACA;MACAvC,WAAW,CAAC;QAAEC,OAAO,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAM,CAAC,CAAC;IAEjE,CAAC,CAAC,OAAOsC,GAAG,EAAE;MACVpC,QAAQ,CAACoC,GAAG,CAAC5B,OAAO,CAAC;IACzB,CAAC,SAAS;MACNN,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,oBACId,OAAA,CAAAE,SAAA;IAAA+C,QAAA,gBACIjD,OAAA,CAACF,KAAK;MACFoD,MAAM,EAAEnC,WAAY;MACpBoC,OAAO,EAAEA,CAAA,KAAMnC,cAAc,CAAC,KAAK,CAAE;MACrCG,KAAK,EAAEF,SAAS,CAACE,KAAM;MAAA8B,QAAA,eAEvBjD,OAAA;QAAAiD,QAAA,EAAIhC,SAAS,CAACG;MAAO;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eAERvD,OAAA;MAAIwD,SAAS,EAAC,iBAAiB;MAAAP,QAAA,EAAC;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrDvD,OAAA;MAAGwD,SAAS,EAAC,oBAAoB;MAAAP,QAAA,EAAC;IAAsD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAE5FvD,OAAA;MAAMyD,QAAQ,EAAE7B,YAAa;MAAC4B,SAAS,EAAC,gBAAgB;MAAAP,QAAA,gBACpDjD,OAAA;QACI0D,IAAI,EAAC,MAAM;QACXnC,IAAI,EAAC,SAAS;QACdC,KAAK,EAAElB,QAAQ,CAACE,OAAQ;QACxBmD,QAAQ,EAAEtC,YAAa;QACvBuC,WAAW,EAAC,SAAS;QACrBC,QAAQ;QACRC,QAAQ,EAAEjD;MAAU;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,eACFvD,OAAA;QACI0D,IAAI,EAAC,QAAQ;QACbnC,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAElB,QAAQ,CAACG,MAAO;QACvBkD,QAAQ,EAAEtC,YAAa;QACvBuC,WAAW,EAAC,yBAAoB;QAChCC,QAAQ;QACRC,QAAQ,EAAEjD;MAAU;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,eACFvD,OAAA;QACIuB,IAAI,EAAC,cAAc;QACnBC,KAAK,EAAElB,QAAQ,CAACI,YAAa;QAC7BiD,QAAQ,EAAEtC,YAAa;QACvByC,QAAQ,EAAEjD,SAAU;QAAAoC,QAAA,gBAEpBjD,OAAA;UAAQwB,KAAK,EAAC,KAAK;UAAAyB,QAAA,EAAC;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxCvD,OAAA;UAAQwB,KAAK,EAAC,UAAU;UAAAyB,QAAA,EAAC;QAAgB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eACTvD,OAAA;QAAQ0D,IAAI,EAAC,QAAQ;QAACI,QAAQ,EAAEjD,SAAU;QAAAoC,QAAA,EACrCpC,SAAS,GAAG,eAAe,GAAG;MAAgB;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EAEN5C,KAAK,iBAAIX,OAAA;MAAGwD,SAAS,EAAC,OAAO;MAAAP,QAAA,EAAEtC;IAAK;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAC5C,CAAC;AAEX;AAAClD,EAAA,CA5HQD,OAAO;AAAA2D,EAAA,GAAP3D,OAAO;AA8HhB,eAAeA,OAAO;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}